import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.neighbors import NearestNeighbors
from sklearn.decomposition import PCA
from sklearn.cluster import DBSCAN, KMeans,AgglomerativeClustering
from sklearn.metrics import silhouette_samples, silhouette_score,adjusted_rand_score
from scipy.cluster.hierarchy import dendrogram


data=pd.read_csv("C:/Users/Utente ASUS/Desktop/Dati Python/MachineLearning/SCADI-Dataset/SCADI-Dataset/SCADI.csv",sep=",")
y_real=data["Classes"]
x=data.drop("Classes",axis=1)

minmax=MinMaxScaler()
ct=ColumnTransformer([("Scaler",minmax,[1])],remainder="passthrough")
x_tra=ct.fit_transform(x)
enc=LabelEncoder()
y_real_enc=enc.fit_transform(y_real)

pca=PCA()
x_ptest=pca.fit(x_tra)
exp_var=np.cumsum(x_ptest.explained_variance_ratio_)
ran=np.arange(1,71)
plt.plot(ran,exp_var,marker="o"),plt.grid(axis="x"),plt.axhline(0.95,c="r",ls="--")

pca_tuned=PCA(n_components=30)
x_pca=pca_tuned.fit_transform(x_tra)
r=range(1,11)
inertia=[]
for i in[1,2,3,4,5,6,7,8,9,10]:
    k=KMeans(n_clusters=i)
    k.fit(x_pca)
    inertia.append(k.inertia_)
    
plt.plot(r,inertia),plt.grid(),plt.xlabel("Clusters"),plt.ylabel("Inertia")
kmeans=KMeans(n_clusters=7)
p=kmeans.fit_predict(x_pca)

#cluster_labels=np.unique(p)
#n_clusters=cluster_labels.shape[0]
#sil_val=silhouette_samples(x_pca,p,metric="euclidean")

#y_ax_lower,y_ax_upper=0,0
#yticks=[]
#for i,c in enumerate(cluster_labels):
 #   c_s_vals=sil_val[p==c]
 #   c_s_vals.sort()
  #  y_ax_upper+=len(c_s_vals)
   # color=cm.jet(float(i)/n_clusters)
   # plt.barh(range(y_ax_lower,y_ax_upper),c_s_vals,height=1.0,edgecolor="none",color=color)
    #yticks.append((y_ax_lower+y_ax_upper)/2)
   # y_ax_lower+=len(c_s_vals)
    
#s_average=np.mean(sil_val)
#plt.axvline(s_average,color="red",ls="--")
#plt.yticks(yticks,cluster_labels+1)
#plt.ylabel("Cluster")
#plt.xlabel("Silhouette coefficent")
#plt.tight_layout()

nn=NearestNeighbors(n_neighbors=2)

nn.fit(x_pca)



distance,index=nn.kneighbors(x_pca)

distance=np.sort(distance,axis=0)
distance=distance[:,1]
plt.plot(distance,marker="o"),plt.grid()

labels=[]
    
for i in [3.7,3.8,3.9,4.0,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5.0]:
    db=DBSCAN(eps=i,min_samples=5)
    db.fit(x_pca)
    labels.append(adjusted_rand_score(y_real_enc,db.labels_))
    
scores=[]

for i in [2,3,4,5,6,7,8,9]:
    ag=AgglomerativeClustering(n_clusters=i,affinity="euclidean",linkage="ward")
    ag.fit_predict(x_pca)
    scores.append(adjusted_rand_score(y_real_enc,ag.labels_))
